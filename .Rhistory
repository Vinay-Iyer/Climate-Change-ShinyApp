source('C:/Users/Venkatramani/AppData/Local/Temp/RtmpKghJoe/evaluate.R')
source('F:/Coursera/R Programming/complete.R')
complete("specdata",1)
source('F:/Coursera/R Programming/complete.R')
complete("specdata",1)
source('F:/Coursera/R Programming/complete.R')
complete("specdata", 1)
source('F:/Coursera/R Programming/complete.R')
complete("specdata", 1)
complete("specdata", 30:25)
source('F:/Coursera/R Programming/complete.R')
complete("specdata", 1)
source('F:/Coursera/R Programming/complete.R')
complete("specdata", 1)
source('F:/Coursera/R Programming/complete.R')
source('F:/Coursera/R Programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 150)
complete_table <- complete("specdata", 1:332)
}
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
source('F:/Coursera/R Programming/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
corr <- function(directory, threshold = 0) {
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
corr <- function(directory, threshold = 0) {
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
corr <- function(directory, threshold = 0) {
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
source('F:/Coursera/R Programming/corr.R')
cr <- corr("specdata", 150)
source('F:/Coursera/R Programming/corr.R')
source('F:/Coursera/R Programming/pollutantmean.R')
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
pollutantmean("specdata", "nitrate",id)
pollutantmean("specdata", "nitrate",id = )
pollutantmean("specdata", "nitrate",id = 1:400)
source('F:/Coursera/R Programming/complete.R')
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
setwd("F:/Coursera/R Programming")
pollutantmean <- function(directory,pollutant,id) {
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
setwd("F:/Coursera/R Programming")
pollutantmean <- function(directory,pollutant,id) {
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
source('F:/Coursera/R Programming/complete.R')
source('F:/Coursera/R Programming/complete.R')
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
source('F:/Coursera/R Programming/corr.R')
cr <- corr("specdata", 150)
head(cr)
source('F:/Coursera/R Programming/pollutantmean.R')
pollutantmean("specdata", "nitrate")
pollutantmean("specdata", "nitrate",id=0)
pollutantmean("specdata", "nitrate",id=1:400)
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
use
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
pollutantmean("specdata", "nitrate")
pollutantmean("specdata", "nitrate",id = default)
pollutantmean("specdata", "nitrate",id = TRUE)
pollutantmean("specdata", "nitrate",id = FALSE)
?lapply
x <- list(a=1:10, b = rnorm)
x <- list(a=1:10, b = rnorm(20,1))
lapply(x,mean)
mean(1:10)
lapply(x,median)
lapply(x,corr)
lapply(x,cov)
lapply(x,runif)
lapply(x,runif(3))
sapply(x,median)
args(apply)
rep(1,4)
noise <- function(n, mean, sd){}
noise <- function(n, mean, sd){
rnorm(n,mean,sd)
}
noise(5,1,2)
noise(5,1,2)
noise(1:5,1:5,2)
mapply(noise,1:5,1:5,2)
?gl
f <- gl(3,10)
f
count.fields(f,[1])
gl(5,3)
gl(5,3,length = 5)
gl(5,1,length = 5)
gl(5,1,length = 5,labels = seq_len(5))
gl(3,10)
library(datasets)
head(airquality)
s <- split(airquality,airquality$Month)
lapply(s,function(x),colMeans(x[,c("Ozone","Solar.R", "Wind")]))
lapply(s, function(x), colMeans(x[,c("Ozone","Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R", "Wind")],na.rm = TRUE))
LOG(1)
log(1)
log(2)
invisible(x)
x
traceback(x)
lm(y~x)
traceback(lm)
traceback()
debug(lm)
lm(y~x)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[,11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply()
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
q()
library(shiny)
runExample("08_html")
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$lanimate)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,summary)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data("iris")
data(iris)
?iris
sapply(iris,iris$virginica)
head(iris)
sapply(iris$Sepal.Length,mean)
sapply(iris$Sepal.Length, Species$virginica,mean)
sapply(iris$Species, Species$virginica,mean)
tapply(iris$Species, Species$virginica, mean)
virginica <- subset(iris,Species == virginica)
virginica <- subset(iris,Species == 'virginica')
s1 <- data.frame(virginica$Sepal.Length)
summary(s1)
colMeans(iris)
rowMeans(iris[,1:4])
apply(iris[,1:4],mean)
apply(iris[,1:4],1,mean)
apply(iris,2,mean)
apply(iris,1,mean)
apply(iris[, 1:4], 2, mean)
?apply
data(mtcars)
?mtcars
head(mtcars)
class(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl==4, mtcars$hp, mean)
sapply(split(mtcars, mtcars$cyl)$'4'$, mean)
sapply(split(mtcars$mpg, mtcars$cyl==4), mean)
m1 <- sapply(split(mtcars$mpg, mtcars$cyl==4), mean)
m1
round(6.588)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
Rscript
?Rscript
my_data
head(my_data)
library(rattle)
rattle()
rattle()
library(rattle)
library(Hmisc)
library(rattle)
rattle()
x11()
pairs(x, labels, panel = points, ...,
horInd = 1:nc, verInd = 1:nc,
lower.panel = panel, upper.panel = panel,
diag.panel = NULL, text.panel = textPanel,
label.pos = 0.5 + has.diag/3, line.main = 3,
cex.labels = NULL, font.labels = 1,
row1attop = TRUE, gap = 1, log = "")
library(rattle)
rattle()
library(rattle)
rattle()
library(rattle)
rattle()
hist(weather)
hist(MinTemp)
hist()
hist(weather,
main="Histogram for weather",
xlab="Density",
border="blue",
col="green",
xlim=c(100,700),
las=1,
breaks=5)
library(rattle)
rattle()
library(rattle)
rattle()
x11()
x<-rnorm(100)
y<-rnorm(100)
z<-rnorm(100)
df<-data.frame(x,y,z)
data()
head(waether)
head(weather)
plus()
head(weather)
x11()
x11()
rm(list = ls())
source('~/.active-rstudio-document')
test(10,2)
library(lattice)
points = matrix(nrow=61, ncol=61, seq(-3,3,0.1)) ## Test points for plotting
seq(-3,3,0.1)
points
source('~/.active-rstudio-document')
?test
??tes
runif
runif(1,-1,1)
?runif
source('~/.active-rstudio-document')
setwd(dir)
setwd(F:\R)
setwd(F:/R)
setwd("F:/R")
read.csv(breast-cancer_scale.csv)
read.csv('breast-cancer_scale.csv')
source('~/.active-rstudio-document')
head(data)
View(data)
View(data)
plot(data,pch=16)
View(data)
View(data)
data <- read.csv('breast-cancer_scale.csv',header = FALSE)
head(data)
plot(data,pch=16)
clc-wc
clc
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
legend("topleft",c('Positive,Negative' ),col=seq(2),pch=1,text.col=seq(2))
legend("topleft",c('Positive','Negative'),col=seq(2),pch=1,text.col=seq(2))
legend("topleft",c('Positive','Negative'),col=seq(2),pch=1,text.col=seq(2))
?rbind
source('F:/R/svm.r')
source('F:/R/svm.r')
source('F:/R/svm.r')
source('F:/R/svm.r')
source('F:/R/svm.r')
plot(x,col=ifelse(y>0,1,2),col='red')
plot(x,col=ifelse(y>0,1,2),type = o)
plot(x,col=ifelse(y>0,1,2))
legend("topleft",c('Positive','Negative'),col=seq(2),pch=1,text.col=seq(2))
source('F:/R/svm.r')
source('F:/R/svm.r')
source('F:/R/svm.r')
source('F:/R/svm.r')
library(kernlab)
svp <- ksvm(xtrain,ytrain,type="C-svc",kernel='vanilladotâ€™,C=100,scaled=c())
source('F:/R/svm.r')
source('F:/R/svm.r')
svp
attributes(svp)
xtrain
plot(svp,data=xtrain)
table(ytest,ypred)
source('F:/R/svm.r')
plot(svp,data=xtrain)
source('F:/R/svm.r')
ypred
ypredscore
source('F:/R/svm.r')
source('F:/R/svm.r')
plot(perf)
library(ROCR)
source('F:/R/svm.r')
plic <- installed.packages(.Library, priority = "high", fields = "License")
plic
installed.packages()
installed.packages(ndtv)
installed.packages(.ndtv)
installed.packages(fields = ndtv)
installed.packages(fields = 'ndtv')
?attach
attach(thuesen)
?thuesen
??thuesen
library( package = ISwR )
library(ISwR)
install.packages(ISwR)
help( package = ISwR )
help( package = ISwR)
help( package = ISwR)
help(package = ISwR)
library(ISwR)
install.packages("ISwR")
attach(thuesen)
library(ISwR)
attach(thuesen)
lm(short.velocity~blood.glucose)
?thuesen
View(thuesen)
plot(short.velocity~blood.glucose)
plot(short.velocity~blood.glucose, data = thuesen)
plot(short.velocity~blood.glucose)
plot(short.velocity~blood.glucose, data = thuesen)
source('F:/Sonovum AG/Klassification/Classification_VRA.R', echo=TRUE)
View(B_data)
dim(B_data)
head(B_data)
length(Flag_B)
rm(list = ls())
?wine
data(wine)
read.csv(file:///F:/Data Science & machine learning_Readings/Wine Analysis/data.data)
read.csv("file:///F:/Data Science & machine learning_Readings/Wine Analysis/data.data")
wine <- read.csv("file:///F:/Data Science & machine learning_Readings/Wine Analysis/data.data")
class(wine)
colnames(wine) <- c('Type', 'Alcohol', 'Malic', 'Ash',
'Alcalinity', 'Magnesium', 'Phenols',
'Flavanoids', 'Nonflavanoids',
'Proanthocyanins', 'Color', 'Hue',
'Dilution', 'Proline')
wine$Type <- as.factor(wine$Type)
save(wine, file="wine.Rdata", compress=TRUE)
source('F:/Data Science & machine learning_Readings/Wine Analysis/wine.R', echo=TRUE)
read.csv(file:///F:/Data Science & machine learning_Readings/Flags/flagdata.data)
read.csv("file:///F:/Data Science & machine learning_Readings/Flags/flagdata.data")
flags_data <- read.csv("file:///F:/Data Science & machine learning_Readings/Flags/flagdata.data")
View(flags_data)
View(wine)
rm(ls=list())
rm(list=ls()
)
install.packages("tensorflow")
library(tensorflow)
library('tensorflow')
library('tensorflow')
library("tensorflow")
library('tensorflow')
?array
source('F:/Independent Projects/softmacx regrassion_tensorflow.R', echo=TRUE)
install.packages("tensorflow")
source('F:/Independent Projects/softmacx regrassion_tensorflow.R', echo=TRUE)
source('F:/Independent Projects/softmacx regrassion_tensorflow.R', echo=TRUE)
source('F:/Independent Projects/softmacx regrassion_tensorflow.R', echo=TRUE)
library('tensorflow')
shiny::runApp('F:/Git Projects/Climate-Change-ShinyApp')
runApp('F:/Git Projects/Climate-Change-ShinyApp')
runApp('F:/Git Projects/Climate-Change-ShinyApp')
runApp('F:/Git Projects/Climate-Change-ShinyApp')
source('F:/Git Projects/Climate-Change-ShinyApp/scripts/testplots.R', echo=TRUE)
rm(list=ls())
source('F:/Git Projects/Climate-Change-ShinyApp/scripts/testplots.R', echo=TRUE)
source('F:/Git Projects/Climate-Change-ShinyApp/scripts/testplots.R', echo=TRUE)
View(data_new)
head(data_new)
class(data_new$AverageTemperature)
vars <- c(data_new$Year,data_new$AverageTemperature)
ggplot(data_new, aes(x=Year, y=AverageTemperature))
data_new <- summarise(Temp = mean(AverageTemperature))
data_new <- summarise(data_new,Temp = mean(AverageTemperature))
View(data)
data <- separate(data,col = dt, into = c("Year", "Month", "Day"), convert = TRUE)
data<- filter(data,Year>1930)
data_new <- filter(data,Country=="India")
ggplot(data_new, aes(x=Year, y=AverageTemperature)) + geom_line()
source('F:/Git Projects/Climate-Change-ShinyApp/scripts/testplots.R', echo=TRUE)
source('F:/Git Projects/Climate-Change-ShinyApp/scripts/testplots.R', echo=TRUE)
ggplot(data1, aes(x=Year, y=Temp)) + geom_path() + geom_point()
ggplot(data1, aes(x=Year, y=Temp)) + geom_path(colour = "grey50") + geom_point()
ggplot(data1, aes(x=Year, y=Temp)) + geom_path(colour = "grey50") + geom_point(aes(colour=Year))
View(data1)
class(data1)
head(data1)
+ geom_violin()
ggplot(data1, aes(x=Year, y=Temp)) + geom_path(colour = "grey50") + geom_point(aes(colour=Year)) + geom_violin()
ggplot(data1, aes(x=Year, y=Temp)) + geom_path(colour = "grey50") + geom_point(aes(colour=Year))
ggplot(data1, aes(x=Year, y=Temp, colour=factor(cyl))) + geom_path(colour = "grey50") + geom_point(aes(colour=Year))
ggplot(data1, aes(x=Year, y=Temp, colour=factor(Year))) + geom_path(colour = "grey50") + geom_point(aes(colour=Year))
ggplot(data1, aes(x=Year, y=Temp) + geom_path(colour = "grey50") + geom_point(aes(colour=Year))
ggplot(data1, aes(x=Year, y=Temp)) + geom_path(colour = "grey50") + geom_point(aes(colour=Year))
ggplot(data1, aes(x=Year, y=Temp)) + geom_path(colour = "grey50") + geom_point(aes(colour=Year))
png(filename = "plots/plot1.png")
ggplot(data1, aes(x=Year, y=Temp)) + geom_path(colour = "grey50") + geom_point(aes(colour=Year))
dev.print(png,plot1.png)
ggsave("plot1.png")
?ggsave
ggsave(mypath,"plot1.png")
mypath <- png(filename = "plots/plot1.png")
ggsave(mypath,"plot1.png")
ggsave(mypath,"plot1.png",device = 'png')
ggsave(mypath,"plot1.png",device = NONE)
ggsave(mypath,"plot1.png",device = NULL)
ggsave(mypath,"plot1.png",device = NULL)
mypath <- png(filename = '/plots')
ggsave(mypath,"plot1.png",device = NULL)
mypath <- plots()
mypath <- tempfile()
mypath <- 'file:///F:/Git Projects/Climate-Change-ShinyApp/plots'
ggsave(mypath,"plot1.png",device = NULL)
ggsave(mypath,"plot1.png",device = NULL)
mypath <- 'file:///F:/Git Projects/Climate-Change-ShinyApp/plots'
ggplot(data1, aes(x=Year, y=Temp)) + geom_path(colour = "grey50") + geom_point(aes(colour=Year))
ggsave(mypath,"plot1.png",device = NULL)
ggsave(mypath,"plot1.png",device = 'png')
ggsave(mypath,"plot1",device = 'png')
plotpath<- file.path('file:///F:/Git Projects/Climate-Change-ShinyApp/plots',
"plot1",paste("plot_",file,".png",sep=""))
ggsave("plot1",device = 'png')
ggsave("/plots/plot1",device = 'png')
png(filename="plots/plot1.png")
ggplot(data1, aes(x=Year, y=Temp)) + geom_path(colour = "grey50") + geom_point(aes(colour=Year))
#ggsave("/plots/plot1")
dev.off()
png(filename="plots/plot1.png")
ggplot(data1, aes(x=Year, y=Temp)) + geom_path(colour = "grey50") + geom_point(aes(colour=Year))
#ggsave("/plots/plot1")
dev.off()
