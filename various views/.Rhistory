sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
q()
library(shiny)
runExample("08_html")
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$lanimate)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,summary)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data("iris")
data(iris)
?iris
sapply(iris,iris$virginica)
head(iris)
sapply(iris$Sepal.Length,mean)
sapply(iris$Sepal.Length, Species$virginica,mean)
sapply(iris$Species, Species$virginica,mean)
tapply(iris$Species, Species$virginica, mean)
virginica <- subset(iris,Species == virginica)
virginica <- subset(iris,Species == 'virginica')
s1 <- data.frame(virginica$Sepal.Length)
summary(s1)
colMeans(iris)
rowMeans(iris[,1:4])
apply(iris[,1:4],mean)
apply(iris[,1:4],1,mean)
apply(iris,2,mean)
apply(iris,1,mean)
apply(iris[, 1:4], 2, mean)
?apply
data(mtcars)
?mtcars
head(mtcars)
class(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl==4, mtcars$hp, mean)
sapply(split(mtcars, mtcars$cyl)$'4'$, mean)
sapply(split(mtcars$mpg, mtcars$cyl==4), mean)
m1 <- sapply(split(mtcars$mpg, mtcars$cyl==4), mean)
m1
round(6.588)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
Rscript
?Rscript
my_data
head(my_data)
library(rattle)
rattle()
rattle()
library(rattle)
library(Hmisc)
library(rattle)
rattle()
x11()
pairs(x, labels, panel = points, ...,
horInd = 1:nc, verInd = 1:nc,
lower.panel = panel, upper.panel = panel,
diag.panel = NULL, text.panel = textPanel,
label.pos = 0.5 + has.diag/3, line.main = 3,
cex.labels = NULL, font.labels = 1,
row1attop = TRUE, gap = 1, log = "")
library(rattle)
rattle()
library(rattle)
rattle()
library(rattle)
rattle()
hist(weather)
hist(MinTemp)
hist()
hist(weather,
main="Histogram for weather",
xlab="Density",
border="blue",
col="green",
xlim=c(100,700),
las=1,
breaks=5)
library(rattle)
rattle()
library(rattle)
rattle()
x11()
x<-rnorm(100)
y<-rnorm(100)
z<-rnorm(100)
df<-data.frame(x,y,z)
data()
head(waether)
head(weather)
plus()
head(weather)
x11()
x11()
rm(list = ls())
source('~/.active-rstudio-document')
test(10,2)
library(lattice)
points = matrix(nrow=61, ncol=61, seq(-3,3,0.1)) ## Test points for plotting
seq(-3,3,0.1)
points
source('~/.active-rstudio-document')
?test
??tes
runif
runif(1,-1,1)
?runif
source('~/.active-rstudio-document')
setwd(dir)
setwd(F:\R)
setwd(F:/R)
setwd("F:/R")
read.csv(breast-cancer_scale.csv)
read.csv('breast-cancer_scale.csv')
source('~/.active-rstudio-document')
head(data)
View(data)
View(data)
plot(data,pch=16)
View(data)
View(data)
data <- read.csv('breast-cancer_scale.csv',header = FALSE)
head(data)
plot(data,pch=16)
clc-wc
clc
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
legend("topleft",c('Positive,Negative' ),col=seq(2),pch=1,text.col=seq(2))
legend("topleft",c('Positive','Negative'),col=seq(2),pch=1,text.col=seq(2))
legend("topleft",c('Positive','Negative'),col=seq(2),pch=1,text.col=seq(2))
?rbind
source('F:/R/svm.r')
source('F:/R/svm.r')
source('F:/R/svm.r')
source('F:/R/svm.r')
source('F:/R/svm.r')
plot(x,col=ifelse(y>0,1,2),col='red')
plot(x,col=ifelse(y>0,1,2),type = o)
plot(x,col=ifelse(y>0,1,2))
legend("topleft",c('Positive','Negative'),col=seq(2),pch=1,text.col=seq(2))
source('F:/R/svm.r')
source('F:/R/svm.r')
source('F:/R/svm.r')
source('F:/R/svm.r')
library(kernlab)
svp <- ksvm(xtrain,ytrain,type="C-svc",kernel='vanilladotâ€™,C=100,scaled=c())
source('F:/R/svm.r')
source('F:/R/svm.r')
svp
attributes(svp)
xtrain
plot(svp,data=xtrain)
table(ytest,ypred)
source('F:/R/svm.r')
plot(svp,data=xtrain)
source('F:/R/svm.r')
ypred
ypredscore
source('F:/R/svm.r')
source('F:/R/svm.r')
plot(perf)
library(ROCR)
source('F:/R/svm.r')
plic <- installed.packages(.Library, priority = "high", fields = "License")
plic
installed.packages()
installed.packages(ndtv)
installed.packages(.ndtv)
installed.packages(fields = ndtv)
installed.packages(fields = 'ndtv')
?attach
attach(thuesen)
?thuesen
??thuesen
library( package = ISwR )
library(ISwR)
install.packages(ISwR)
help( package = ISwR )
help( package = ISwR)
help( package = ISwR)
help(package = ISwR)
library(ISwR)
install.packages("ISwR")
attach(thuesen)
library(ISwR)
attach(thuesen)
lm(short.velocity~blood.glucose)
?thuesen
View(thuesen)
plot(short.velocity~blood.glucose)
plot(short.velocity~blood.glucose, data = thuesen)
plot(short.velocity~blood.glucose)
plot(short.velocity~blood.glucose, data = thuesen)
source('F:/Sonovum AG/Klassification/Classification_VRA.R', echo=TRUE)
View(B_data)
dim(B_data)
head(B_data)
length(Flag_B)
rm(list = ls())
?wine
data(wine)
read.csv(file:///F:/Data Science & machine learning_Readings/Wine Analysis/data.data)
read.csv("file:///F:/Data Science & machine learning_Readings/Wine Analysis/data.data")
wine <- read.csv("file:///F:/Data Science & machine learning_Readings/Wine Analysis/data.data")
class(wine)
colnames(wine) <- c('Type', 'Alcohol', 'Malic', 'Ash',
'Alcalinity', 'Magnesium', 'Phenols',
'Flavanoids', 'Nonflavanoids',
'Proanthocyanins', 'Color', 'Hue',
'Dilution', 'Proline')
wine$Type <- as.factor(wine$Type)
save(wine, file="wine.Rdata", compress=TRUE)
source('F:/Data Science & machine learning_Readings/Wine Analysis/wine.R', echo=TRUE)
read.csv(file:///F:/Data Science & machine learning_Readings/Flags/flagdata.data)
read.csv("file:///F:/Data Science & machine learning_Readings/Flags/flagdata.data")
flags_data <- read.csv("file:///F:/Data Science & machine learning_Readings/Flags/flagdata.data")
View(flags_data)
View(wine)
rm(ls=list())
rm(list=ls()
)
install.packages("tensorflow")
library(tensorflow)
library('tensorflow')
library('tensorflow')
library("tensorflow")
library('tensorflow')
?array
source('F:/Independent Projects/softmacx regrassion_tensorflow.R', echo=TRUE)
install.packages("tensorflow")
source('F:/Independent Projects/softmacx regrassion_tensorflow.R', echo=TRUE)
source('F:/Independent Projects/softmacx regrassion_tensorflow.R', echo=TRUE)
source('F:/Independent Projects/softmacx regrassion_tensorflow.R', echo=TRUE)
library('tensorflow')
shiny::runApp('F:/Git Projects/Climate-Change-ShinyApp')
runApp('F:/Git Projects/Climate-Change-ShinyApp')
runApp('F:/Git Projects/Climate-Change-ShinyApp')
runApp('F:/Git Projects/Climate-Change-ShinyApp')
shiny::runApp('F:/Git Projects/Climate-Change-ShinyApp')
runApp('F:/Git Projects/Climate-Change-ShinyApp')
runApp('F:/Git Projects/Climate-Change-ShinyApp')
rm(list=ls())
# Import libraries
library(shiny)
library(plotly)
library(ggplot2)
library(ggthemes) # themes to assist ggplot
library(data.table) # for fast reading and data manipulation
library('tidyr')
data <- read.csv('Data/GlobalLandTemperaturesByState.csv', TRUE,",")
head(data)
row.has.na <- apply(data, 1, function(x){any(is.na(x))})
sum(row.has.na)
data <- data[!row.has.na,]
data <- separate(data,col = dt, into = c("Year", "Month", "Day"), convert = TRUE)
library(tidyr)
data <- read.csv('Data/GlobalLandTemperaturesByState.csv', TRUE,",")
head(data)
row.has.na <- apply(data, 1, function(x){any(is.na(x))})
sum(row.has.na)
data <- data[!row.has.na,]
data <- separate(data,col = dt, into = c("Year", "Month", "Day"), convert = TRUE)
data<- filter(data,Year>1900)
# Import libraries
library(shiny)
library(plotly)
library(ggplot2)
library(ggthemes) # themes to assist ggplot
library(data.table) # for fast reading and data manipulation
library(tidyr)
data <- read.csv('Data/GlobalLandTemperaturesByState.csv', TRUE,",")
head(data)
row.has.na <- apply(data, 1, function(x){any(is.na(x))})
sum(row.has.na)
data <- data[!row.has.na,]
data <- separate(data,col = dt, into = c("Year", "Month", "Day"), convert = TRUE)
data <- read.csv('Data/GlobalLandTemperaturesByState.csv', TRUE,",")
setwd('/Git Projects/Climate-Change-ShinyApp')
library(shiny)
library(plotly)
library(ggplot2)
library(ggthemes) # themes to assist ggplot
library(data.table) # for fast reading and data manipulation
library(tidyr)
data <- read.csv('Data/GlobalLandTemperaturesByState.csv', TRUE,",")
head(data)
row.has.na <- apply(data, 1, function(x){any(is.na(x))})
sum(row.has.na)
data <- data[!row.has.na,]
data <- separate(data,col = dt, into = c("Year", "Month", "Day"), convert = TRUE)
data<- filter(data,Year>1900)
head(data$Year)
data<- filter(data,Year>1930)
data$Year
data <- group_by(data$Year)
?group_by
?group
?group
runApp()
runApp()
rm(list=ls())
setwd('/Git Projects/Climate-Change-ShinyApp')
# Import libraries
library(shiny)
library(plotly)
library(ggplot2)
library(ggthemes) # themes to assist ggplot
library(data.table) # for fast reading and data manipulation
library(tidyr)
data <- read.csv('Data/GlobalLandTemperaturesByState.csv', TRUE,",")
head(data)
row.has.na <- apply(data, 1, function(x){any(is.na(x))})
sum(row.has.na)
data <- data[!row.has.na,]
data <- separate(data,col = dt, into = c("Year", "Month", "Day"), convert = TRUE)
data<- filter(data,Year>1930)
runApp('various views')
runApp('various views')
data <- read.csv('Data/GlobalLandTemperaturesByState.csv', TRUE,",")
head(data)
row.has.na <- apply(data, 1, function(x){any(is.na(x))})
sum(row.has.na)
data <- data[!row.has.na,]
data <- separate(data,col = dt, into = c("Year", "Month", "Day"), convert = TRUE)
data<- filter(data,Year>1930)
data_new <- filter(data,Country=="India")
ggplot(data_new) +
geom_line(aes(x = Year, y = Temp, by = Name, color = Name)) +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
View(data_new)
ggplot(data_new) +
geom_line(aes(x = Year, y = AverageTemperature, by = Name, color = Name)) +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
ggplot(data_new) +
geom_line(aes(x = Year, y = AverageTemperature)) +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
ggplot(data_new) +
geom_line(aes(x = Year, y = AverageTemperature)) +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
?geom_line
runApp('various views')
runApp('various views')
runApp('various views')
runApp('various views')
runApp('various views')
runApp('various views')
runApp('various views')
source('global.r')
setwd('/Git Projects/Climate-Change-ShinyApp/various views')
source('global.r')
source('global.r')
data <- read.csv('f:/Git Projects/Climate-Change-ShinyApp/Data/GlobalLandTemperaturesByState.csv', TRUE,",")
source('global.r')
runApp()
runApp()
runApp()
runApp()
runApp()
?ggplot
?geom_line
runApp()
data_new <- filter(data,Country==input$plot_select)
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp)) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
data_new <- filter(data,Country==input$plot_select)
data_new <- filter(data,Country=="India")
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp)) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
data_new <- filter(data,Country=="India")
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp, by = Name, color=Name)) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
data_new <- filter(data,Country=="India")
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp, color=Name)) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
ggplot(data_new1, aes(x = Year, y = Temp, color= cond)) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp, colour=cond)) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp, colour=Country)) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
data_new <- filter(data,Country=="India")
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp, colour=Country)) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp, colour=Year)) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
data_new <- filter(data,Country=="India")
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp, colour=Temp)) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
data_new <- filter(data,Country=="India","Canada")
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp, colour=cond)) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
data_new <- filter(data,Country=="India","Canada")
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp, colour=Country)) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
data_new <- filter(data,Country=="India","Canada")
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp, colour=blue)) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
data_new <- filter(data,Country=="India","Canada")
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp, colour='blue')) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
data_new <- filter(data,Country=="India","Canada")
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp, colour='cond')) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
data_new <- filter(data,Country=="India","Canada")
data_new %>%
group_by(Year) %>%
summarise(Temp = mean(AverageTemperature)) -> data_new1
ggplot(data_new1, aes(x = Year, y = Temp, colour='Country')) + geom_line() +
labs(x = "Year", y = "AverageTemperature", title = "Average Temperatures") +
scale_colour_hue("clarity", l = 70, c = 150) + ggthemes::theme_few()
runApp()
runApp()
runApp()
runApp()
runApp()
